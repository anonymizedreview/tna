---
title: "Supplementary material to: 'Transition Network Analysis: A Novel Method To Capture The Temporal, Relational And Centrality of The Learning Process'"
format: gfm
dpi: 600
execute: 
  message: FALSE
  warning: FALSE
knitr: 
  opts_chunk:
    fig.align: center
    fig.dpi: 600
---

# Preparation

Importing libraries
```{r, results = F}
library(dplyr)
library(TraMineR)
library(janitor)
library(tna) # devtools::install_github("anonymizedreview/tna", force = T)
library(ggseqplot)
library(seqHMM)
library(tidyr)
library(NetworkToolbox)
library(tibble)
library(gt)
library(patchwork)
library(reshape2)
library(networktools)
options(scipen = 999)
```

Importing the dataset (https://www.delibot.xyz/) and preparing it
```{r}
combo_data <- rio::import("combo_data.csv")
combo_data_filtered <- combo_data |> 
  filter(!annotation_target %in% c("", "0", "None")) 

combod_withseq <- combo_data_filtered |> 
  group_by(group_id) |> 
  mutate(Sequence = seq_along(message_id)) |> 
  ungroup()

performance <- combod_withseq |> 
 group_by(group_id) |> 
 mutate(interactions = n()) |> 
 summarise_at(vars(performance_change, team_performance, interactions), 
              mean, na.rm = TRUE)

combo_freqs <- combod_withseq |> 
  tabyl(group_id, annotation_target) |> 
  as.data.frame() |> 
  left_join(performance)

data_reshaped <- dcast(group_id ~ Sequence, 
                                 data = combod_withseq, 
                                 value.var = "annotation_target")

data_joined <- left_join(combo_freqs, data_reshaped)
```

#  General model

Building a sequence
```{r, warning=FALSE, fig.width=5, fig.height=3}
seq_data <- seqdef(data_joined, 10:50)

ggseqdplot(seq_data)
 
ggseqiplot(seq_data)
``` 
Building the TNA model
```{r}
tna_model <- build_tna(seq_data)
```
Plotting the TNA model
```{r, fig.width=4, fig.height=4}
plot(tna_model)
```
Initial probabilities
```{r}
data.frame(`Initial prob.` = tna_model$inits[[1]]) |> 
  rownames_to_column("Interaction") |> arrange(desc(`Initial.prob.`)) |> 
  gt() |> fmt_percent()
```

Transition probabilities
```{r}
tna_model$transits[[1]] |> data.frame() |> 
  rownames_to_column("From\\To") |> 
  gt() |> fmt_percent()
```

Centrality measures
```{r, fig.width=6,fig.height=4}
centrality_measures = c("Betweenness", "Closeness", "InStrength", "OutStrength")

cents_withoutloops1 <- centralities(tna_model, measures = centrality_measures[1:2], 
                                   loops = FALSE, normalize = TRUE)
cents_withoutloops2 <- centralities(tna_model, measures = centrality_measures[3:4], 
                                   loops = FALSE, normalize = FALSE)

plot(cents_withoutloops2, ncol = 2, reorder = T,
     point_color = tna_model$colors, line_color = tna_model$colors) /
plot(cents_withoutloops1, ncol = 2, reorder = T,
     point_color = tna_model$colors, line_color = tna_model$colors) 
```
# Clustering

Initialization

```{r}
set.seed(265)

Nvar <- length(alphabet(seq_data))
Nclusters <- 3
trans_probs <- simulate_transition_probs(Nvar, Nclusters)
init_probs <- simulate_initial_probs(Nvar, Nclusters)
```

Building and fitting the model (this might take a while...)
```{r, eval = F, warning = F}
set.seed(265)
modelTrans <- build_mmm(seq_data, transition_probs = trans_probs,
 initial_probs = init_probs, data = data_joined, 
 formula = ~ 0 + team_performance)

controlEM = list(restart = list(times = 500, n_optimum = 501))

fitModelTrans <- fit_model(
 modelTrans, 
 global_step = TRUE,
 control_global = list(algorithm = "NLOPT_GD_STOGO_RAND"),
 local_step = TRUE,
 threads = 60,
 control_em = controlEM)

```{r, include = F}
# saveRDS(fitModelTrans,"fitModelTrans.RDS")
fitModelTrans <- readRDS("fitModelTrans3.RDS")
```

```{r, include = F}
# Checking the results
fitModelTrans$global_results$message
fitModelTrans$logLik
BIC(fitModelTrans$model)
table(round(fitModelTrans$em_results$best_opt_restart, 2)) |> 
  as.data.frame() |> arrange(desc(Freq))
```

Plotting each cluster sequence
```{r, fig.width=12, fig.height=8}
clusternames <- c("Solvers", "Regulated", "Debaters")

cluster_names(fitModelTrans$model) <- clusternames
sumamaryx <- summary(fitModelTrans$model)
ggseqdplot(seq_data, group = sumamaryx$most_probable_cluster) + 
  theme(strip.text = element_text(size = 17))
 

ggseqiplot(seq_data, group = sumamaryx$most_probable_cluster) + 
  theme(strip.text = element_text(size = 17))
```

Covariate effects
```{r}
summary(fitModelTrans$model)-> modelsummaryS

staderrors <- data.frame(
    sqrt(diag(modelsummaryS$vcov)), nrow(modelsummaryS$coefficients)) |> 
    rownames_to_column(var = "variables") |> rename(Error = 2) |> arrange(variables) 

coefficients <- modelsummaryS$coefficients|> as.data.frame() |> 
  rownames_to_column() |> as_tibble() |> 
  pivot_longer(c(3, 4)) |> 
  rename(Estimate = value, cluster = name) |> select (-2) |>
  mutate(variablescf= paste0(cluster, ": ", rowname)) |> arrange(variablescf)

calculatederrors <- cbind(coefficients, staderrors)

errorsx <- select(calculatederrors, variable = rowname, cluster, Estimate, Error)
errorsx$z <- errorsx$Estimate/errorsx$Error
errorsx$p <- (1 - pnorm(abs(errorsx$z), 0, 1)) * 2
errorsx$cilow=errorsx$Estimate -  qnorm(0.975) * errorsx$Error
errorsx$cihi=errorsx$Estimate +  qnorm(0.975) * errorsx$Error
errorsx |>  gt() |>
  fmt_number( decimals = 3)  
```

Creating a new model with the cluster information
```{r}
tna_model_clus <- build_tna(fitModelTrans$model)
```

Initial probabilities
```{r}
data.frame(tna_model_clus$inits) |> 
  rownames_to_column("Interaction") |>  
  gt() |> fmt_percent()
```

Transition probabilities
```{r}
tna_model_clus$transits[[1]] |> data.frame() |> 
  rownames_to_column("From\\To") |> gt() |>
  tab_header(title = names(tna_model_clus$transits)[1]) |>
  fmt_percent()
```

```{r}
tna_model_clus$transits[[2]] |> data.frame() |> 
  rownames_to_column("From\\To") |> gt() |>
  tab_header(title = names(tna_model_clus$transits)[2]) |>
  fmt_percent()
```

```{r}
tna_model_clus$transits[[3]] |> data.frame() |> 
  rownames_to_column("From\\To") |> gt() |>
  tab_header(title = names(tna_model_clus$transits)[3]) |>
  fmt_percent()
```

Plotting the cluster transitions
```{r, fig.width=10, fig.height=3.2}
layout(t(1:3))
plot(tna_model_clus, cluster = 1, edge.label.cex = 2, vsize = 18, 
     title = clusternames[1], title.cex = 2.5)
plot(tna_model_clus, cluster = 2, edge.label.cex = 2, vsize = 18, 
     title = clusternames[2], title.cex = 2.5)
plot(tna_model_clus, cluster = 3, edge.label.cex = 2, vsize = 18, 
     title = clusternames[3], title.cex = 2.5)
```

Cluster centralities
```{r, fig.width=8, fig.height=5}
layout(t(1:2))
centralities_per_cluster1 <- centralities(tna_model_clus, normalize = T, 
                                         measures = centrality_measures[1:2])

centralities_per_cluster2 <- centralities(tna_model_clus, normalize = F, 
                                         measures = centrality_measures[3:4])

centralities_per_cluster <- cbind(centralities_per_cluster1 |> select(1:3),
                     centralities_per_cluster2 |> select(2:4)) |> as_centralities()
  
plot(centralities_per_cluster)
```


Communities
```{r, fig.width=10, fig.height=3.2, message = FALSE, warning= FALSE, }
set.seed(265)

layout(t(1:3))
Bridging1 <- bridge(fitModelTrans$model$transition_probs$Solvers) 
plot(tna_model_clus, cluster = 1, edge.label.cex = 2, pie = NULL, vsize = 20,
     color = Bridging1$communities, title = clusternames[1], title.cex = 2.5)

Bridging2 <- bridge(fitModelTrans$model$transition_probs$Regulated) 
plot(tna_model_clus, cluster = 2, edge.label.cex = 2, pie = NULL, vsize = 20, 
     color = Bridging2$communities, title = clusternames[2], title.cex = 2.5)

Bridging3 <- bridge(fitModelTrans$model$transition_probs$Debaters) 
plot(tna_model_clus, cluster = 3, edge.label.cex = 2, pie = NULL, vsize = 20, 
     color = Bridging3$communities, title = clusternames[3], title.cex = 2.5)
```

# Comparing high achievers to the rest

Identify high achievers
```{r}
top10 <- quantile(data_joined$team_performance, c(0.9))
```

Create one model for high achievers and one for low achievers
```{r, fig.width=6, fig.height=3}
layout(t(1:2))

#Difference
LowAchievers = data_joined$team_performance < top10 
HighAchievers <- data_joined$team_performance > top10 

low_model <- build_tna(seq_data[LowAchievers,]); 
plot(low_model, title = "Low achievers")

high_model <- build_tna(seq_data[HighAchievers,]); 
plot(high_model, title = "High achievers")
```


Comparing high vs. low achieversâ€™ transitions
```{r fig.height=4, fig.width=8}
layout(t(1:2))

plot(high_model, title = "High achievers")
plot_compare(high_model, low_model, title = "High - Low" )
```


